name: Bootstrap + Smoke (Cost Forge 2)
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare folders
        run: mkdir -p utils pages data templates .streamlit tools

      - name: Core files
        run: |
          echo "# Cost Forge 2 — Full + Legacy" > README.md
          echo "streamlit>=1.36\npandas>=2.2\npython-docx>=1.1.0\nreportlab>=4.1\nruff>=0.5" > requirements.txt
          echo "__pycache__/\n.venv/\nvenv/\n*.py[cod]\n.DS_Store\n.cache/\n*.zip" > .gitignore
          echo "import streamlit as st\nst.set_page_config(page_title='Cost Forge 2', layout='wide')\nst.title('🛠️ Cost Forge 2')" > home.py

      - name: Utils (core)
        run: |
          cat > utils/safe.py <<'PY'
          import streamlit as st
          def guard(fn):
              try: fn()
              except Exception as e:
                  st.error(f"{type(e).__name__}: {e}")
                  st.stop()
          PY

          cat > utils/io.py <<'PY'
          from pathlib import Path
          import pandas as pd
          SCHEMA_MATERIALS={"material_id":"string","description":"string","price_eur_per_kg":"float64"}
          SCHEMA_PROCESSES={"process_id":"string","machine_rate_eur_h":"float64","labor_rate_eur_h":"float64","overhead_pct":"float64","margin_pct":"float64"}
          SCHEMA_BOM={"line_id":"string","material_id":"string","qty":"Int64","mass_kg":"float64","process_route":"string","runtime_h":"float64"}
          SCHEMA_QUOTES={"supplier":"string","material_id":"string","price_eur_per_kg":"float64","lead_time_days":"Int64","valid_until":"string","preferred":"Int64"}
          def paths():
              d=Path("data")
              return {"materials":d/"materials_db.csv","processes":d/"processes_db.csv","bom":d/"bom_template.csv","quotes":d/"supplier_quotes.csv"}
          def _read_csv(p, schema=None):
              if schema is None: return pd.read_csv(p)
              dtypes={k:v for k,v in schema.items() if v!="Int64"}
              df=pd.read_csv(p,dtype=dtypes)
              for c,t in schema.items():
                  if t=="Int64" and c in df.columns: df[c]=df[c].astype("Int64")
              return df
          def load_materials(): return _read_csv(paths()["materials"],SCHEMA_MATERIALS)
          def load_processes(): return _read_csv(paths()["processes"],SCHEMA_PROCESSES)
          def load_bom(): return _read_csv(paths()["bom"],SCHEMA_BOM)
          def load_quotes(): return _read_csv(paths()["quotes"],SCHEMA_QUOTES)
          PY

      - name: Data samples
        run: |
          echo "material_id,description,price_eur_per_kg\nAL6061,Aluminium 6061,4.5\nS235,Staal S235,1.1" > data/materials_db.csv
          echo "process_id,machine_rate_eur_h,labor_rate_eur_h,overhead_pct,margin_pct\nMILLING_CNC_3AX,80,45,0.2,0.1\nTURNING_CNC,70,45,0.2,0.1" > data/processes_db.csv
          echo "line_id,material_id,qty,mass_kg,process_route,runtime_h\nL1,AL6061,10,2.4,MILLING_CNC_3AX,0.4\nL2,S235,6,5.0,TURNING_CNC,0.35" > data/bom_template.csv
          echo "supplier,material_id,price_eur_per_kg,lead_time_days,valid_until,preferred\nMetals4U,AL6061,4.4,7,2025-12-31,1\nSteelCo,S235,1.05,10,2025-11-15,1" > data/supplier_quotes.csv

      - name: Pages (Quick Cost + Data Quality)
        run: |
          cat > pages/01_Quick_Cost.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom, load_quotes
          def main():
              st.title("💸 Quick Cost (beste quotes)")
              mats=load_materials(); procs=load_processes(); bom=load_bom(); quotes=load_quotes()
              st.dataframe(bom); st.write("Totaal kosten hier berekenen...")
          guard(main)
          PY

          cat > pages/05_Data_Quality.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials
          def main():
              st.title("🧪 Data Quality")
              mats=load_materials()
              if "price_eur_per_kg" not in mats.columns:
                  st.error("Kolom price_eur_per_kg ontbreekt")
              else:
                  st.success("Materiaaldata OK")
          guard(main)
          PY

      - name: Commit & push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Bootstrap + Smoke base files"
          git push origin HEAD:main

  smoke:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff

      - name: Ruff lint
        run: ruff check utils pages home.py --output-format=github

      - name: Quick import test
        run: |
          python - <<'PY'
          import importlib, sys
          mods = ["utils.safe","utils.io"]
          bad=[]
          for m in mods:
              try: importlib.import_module(m)
              except Exception as e: bad.append((m, repr(e)))
          if bad:
              for m,e in bad: print(f"[IMPORT FAIL] {m}: {e}")
              sys.exit(1)
          print("Imports OK")
          PY

      - name: CSV schema check
        run: |
          python - <<'PY'
          import sys
          from utils.io import SCHEMA_MATERIALS, load_materials
          mats=load_materials()
          miss=[c for c in SCHEMA_MATERIALS if c not in mats.columns]
          if miss:
              print(f"Ontbrekende kolommen: {miss}")
              sys.exit(1)
          print("Schema OK")
          PY
