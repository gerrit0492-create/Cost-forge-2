name: Unpack ZIP (No-MV, Safe)

on:
  workflow_dispatch:
    inputs:
      zip:
        description: "Zip-bestandsnaam in repo-root (bv. Cost-Forge-2.2-full.zip)"
        required: false
        default: "Cost-Forge-2.2-full.zip"
  push:
    paths:
      - "*.zip"

permissions:
  contents: write

concurrency:
  group: unpack-zip
  cancel-in-progress: true

jobs:
  unpack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Locate ZIP
        id: z
        shell: bash
        run: |
          set -euo pipefail
          ZIP="${{ github.event.inputs.zip || '' }}"
          if [ -z "$ZIP" ]; then
            ZIP="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$ZIP" ] || [ ! -f "$ZIP" ]; then
            echo "‚ùå Geen ZIP gevonden in repo-root."
            exit 1
          fi
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          echo "üì¶ ZIP: $ZIP"

      - name: Unzip into temp dir
        shell: bash
        run: |
          set -euo pipefail
          rm -rf extracted
          unzip -q -o "${{ steps.z.outputs.zip }}" -d extracted

      - name: Determine source folder
        id: src
        shell: bash
        run: |
          set -euo pipefail
          DIRS=$(find extracted -mindepth 1 -maxdepth 1 -type d | wc -l)
          FILES=$(find extracted -mindepth 1 -maxdepth 1 -type f | wc -l)
          if [ "$DIRS" -eq 1 ] && [ "$FILES" -eq 0 ]; then
            SRC="$(find extracted -mindepth 1 -maxdepth 1 -type d)"
          else
            SRC="extracted"
          fi
          echo "src=$SRC" >> "$GITHUB_OUTPUT"
          echo "üìÅ Source: $SRC"

      - name: Remove .git/.github from extracted (avoid conflicts)
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.src.outputs.src }}"
          find "$SRC" -type d -name ".git" -prune -exec rm -rf {} + || true
          find "$SRC" -type d -name ".github" -prune -exec rm -rf {} + || true

      - name: Copy contents to repo root (no mv)
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.src.outputs.src }}"
          # Kopieer ALLE inhoud incl. dotfiles; geen mv, dus geen "Directory not empty"
          cp -a "$SRC/." ./

      - name: Cleanup temp and ZIP
        shell: bash
        run: |
          set -euo pipefail
          rm -rf extracted
          git rm -f "${{ steps.z.outputs.zip }}" 2>/dev/null || rm -f "${{ steps.z.outputs.zip }}"

      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "unpack: ${{ steps.z.outputs.zip }} ‚Üí repo (skip .git/.github, cp -a)"
            git push
            echo "‚úÖ Uitgepakt en gecommit."
          else
            echo "‚ÑπÔ∏è Geen wijzigingen om te committen."
          fi
